# -*- coding: utf-8 -*-
# flake8:noqa
# isort:skip_file
# vim:et:ft=python:nowrap:sts=4:sw=4:ts=4
##############################################################################
# Note: Generated by soapfish.wsdl2py at 2017-07-18 17:05:50.590884
#       Try to avoid editing it if you might need to regenerate it.
##############################################################################

from soapfish import soap, xsd
from pyfva.soap import settings
BaseHeader = xsd.ComplexType

##############################################################################
# Schemas


# http://bccr.fva.cr/


class CodigoDeError(xsd.String):
    enumeration = ['SinErrores', 'ProblemasAlValidar', 'EntidadNoSeEncuentraRegistrada', 'EntidadSeEncuentraInactiva', 'DocumentoXmlInvalido', 'DocumentoXmlNoFirmado', 'DocumentoXmlSinQualifyingProperties', 'DocumentoXmlConEstructuraInvalida', 'CertificadoFirmanteNoValido', 'CertificadosNoValidos', 'RespuestaOcspNoValida', 'EstampaDeTiempoDeFirmaNoValida', 'SegundaEstampaDeTiempoNoValida', 'CrlsNoValidos', 'ReferenciaKeyInfoNoExiste', 'ReferenciaPropiesdadesFirmadasNoExiste', 'ReferenciaDocumentoOriginalNoExiste', 'ReferenciaADocumentoOriginalSinTransform', 'ReferenciaAPropiedadesFirmadasSinType', 'ReferenciaDocumentoConType', 'ReferenciaKeyInfoConType', 'ReferenciaSignedPropertiesConTransform', 'ReferenciaKeyInfoConTransform', 'HashReferenciaKeyInfoNoCoincide', 'HashReferenciaPropiedadesFirmadasNoCoincide', 'HashReferenciaDocumentoOriginalNoCoincide', 'SignatureValueNoValido', 'KeyValueNoCoincideConLlavePublica', 'OcspNoAsociadaACertificado', 'CertificadoFirmanteRevocado', 'CertificadoFirmanteEstadoDesconocido', 'CertificadoFirmanteVencido', 'TipoDeCertificadoFirmanteNoValido', 'QualifyingPropertiesContraIdSignature', 'SerialNumberNoCoincide', 'IssuerNameNoCoincide', 'MimeTypeNoPermitido', 'MimeTypeCadenaNoValida', 'EncodingNoPermitido',
                   'CantidadDataObjectFormatIncorrecta', 'DataObjectFormatNoValido', 'HashCertificadoFirmanteNoCoincide', 'SigningTimeFormatoNoValido', 'EstampaDeTiempoDeFirmaIntegridadComprometida', 'CertificadoDeEstampaDeFirmaNoCoincide', 'SegundaEstampaDeTiempoIntegridadComprometida', 'CertificadoDeSegundaEstampaNoCoincide', 'CantidadDeReferenciasACertificadosIncorrecta', 'ReferenciaACertificadoNoValida', 'NumeroDeSerieNoCoincide', 'CompleteCertRefsEmisoresDistintos', 'ResponderIdIncorrecto', 'ByKeyNoCoincideConLlaveOcsp', 'ByNameNoCoincideConLlaveOcsp', 'CantidadDeReferenciasOcspIncorrecta', 'ReferenciaAOcspNoValida', 'ProduceAtDeOcspIncorrecto', 'CantidadDeReferenciasCrlIncorrecta', 'ReferenciaACrlNoValida', 'IssuerDeCrlIncorrecto', 'IssueTimeDeCrlIncorrecto', 'NumeroDeCrlIncorrecto', 'JerarquiaDeCertificadoFirmanteIncompleta', 'JerarquiaDeCertificadoFirmanteNoValida', 'JerarquiaDeCertificadoHojaIncompleta', 'JerarquiaDeCertificadoHojaNoValida', 'CertificadoTSANoIncluido', 'CertificadoOcspNoIncluido', 'CertificadoExtra', 'CertificadoSinCRL', 'CertificadoRevocado', 'CertificadoVencido', 'CertificadoOcspNoCoincide', 'RespuestaOcspFueraDeLasEstampas', 'CrlVencido', 'CrlNoValido', 'CrlDeltaYBaseNoIncluidos', 'CrlExtra', 'CrlIndicatorNoValido', 'FirmaSinPrefijo']


class ResultadoValidacion(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ExtensionData = xsd.Element(__name__ + '.ExtensionDataObject', minOccurs=0)
    Advertencias = xsd.Element(__name__ + '.ArrayOfString', minOccurs=0)
    ErroresEncontrados = xsd.Element(
        __name__ + '.ArrayOfErrorDeDocumento', minOccurs=0)
    Firmantes = xsd.Element(__name__ + '.ArrayOfFirmante', minOccurs=0)
    FueExitosa = xsd.Element(xsd.Boolean, minOccurs=1)

    @classmethod
    def create(cls, FueExitosa):
        instance = cls()
        instance.FueExitosa = FueExitosa
        return instance


class ExtensionDataObject(xsd.ComplexType):
    pass


class ArrayOfString(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    string = xsd.ListElement(xsd.String, tagname='string',
                             minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ArrayOfErrorDeDocumento(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ErrorDeDocumento = xsd.ListElement(
        __name__ + '.ErrorDeDocumento', tagname='ErrorDeDocumento', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ErrorDeDocumento(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ExtensionData = xsd.Element(ExtensionDataObject, minOccurs=0)
    Codigo = xsd.Element(CodigoDeError, minOccurs=1)
    Detalle = xsd.Element(xsd.String, minOccurs=0)

    @classmethod
    def create(cls, Codigo):
        instance = cls()
        instance.Codigo = Codigo
        return instance


class ArrayOfFirmante(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Firmante = xsd.ListElement(__name__ + '.Firmante', tagname='Firmante',
                               minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class Firmante(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ExtensionData = xsd.Element(ExtensionDataObject, minOccurs=0)
    Cedula = xsd.Element(xsd.String, minOccurs=0)
    FechaDeFirma = xsd.Element(xsd.DateTime, minOccurs=1)
    NombreCompleto = xsd.Element(xsd.String, minOccurs=0)

    @classmethod
    def create(cls, FechaDeFirma):
        instance = cls()
        instance.FechaDeFirma = FechaDeFirma
        return instance


class ValideElDocumentoXmlEnvelopedCoFirma(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    elDocumentoXml = xsd.Element(xsd.Base64Binary, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ValideElDocumentoXmlEnvelopedCoFirmaResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ValideElDocumentoXmlEnvelopedCoFirmaResult = xsd.Element(
        ResultadoValidacion, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ValideElServicio(xsd.ComplexType):
    pass


class ValideElServicioResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ValideElServicioResult = xsd.Element(xsd.Boolean, minOccurs=1)

    @classmethod
    def create(cls, ValideElServicioResult):
        instance = cls()
        instance.ValideElServicioResult = ValideElServicioResult
        return instance


Schema_c49e7 = xsd.Schema(
    imports=[],
    includes=[],
    targetNamespace=settings.FVA_HOST,
    elementFormDefault='qualified',
    simpleTypes=[CodigoDeError],
    attributeGroups=[],
    groups=[],
    complexTypes=[ResultadoValidacion, ExtensionDataObject, ArrayOfString,
                  ArrayOfErrorDeDocumento, ErrorDeDocumento, ArrayOfFirmante, Firmante],
    elements={'ValideElDocumentoXmlEnvelopedCoFirma': xsd.Element(ValideElDocumentoXmlEnvelopedCoFirma()), 'ValideElDocumentoXmlEnvelopedCoFirmaResponse': xsd.Element(
        ValideElDocumentoXmlEnvelopedCoFirmaResponse()), 'ValideElServicio': xsd.Element(ValideElServicio()), 'ValideElServicioResponse': xsd.Element(ValideElServicioResponse())},
)


##############################################################################
# Methods


ValideElDocumentoXmlEnvelopedCoFirma_method = xsd.Method(
    soapAction=settings.FVA_HOST + 'ValideElDocumentoXmlEnvelopedCoFirma',
    input='ValideElDocumentoXmlEnvelopedCoFirma',
    inputPartName='parameters',
    output='ValideElDocumentoXmlEnvelopedCoFirmaResponse',
    outputPartName='parameters',
    operationName='ValideElDocumentoXmlEnvelopedCoFirma',
    style='document',
)


ValideElServicio_method = xsd.Method(
    soapAction=settings.FVA_HOST + 'ValideElServicio',
    input='ValideElServicio',
    inputPartName='parameters',
    output='ValideElServicioResponse',
    outputPartName='parameters',
    operationName='ValideElServicio',
    style='document',
)


##############################################################################
# SOAP Service


ValidadorDeDocumentoSoap_SERVICE = soap.Service(
    name='ValidadorDeDocumentoSoap',
    targetNamespace=settings.FVA_HOST,
    location='${scheme}://${host}/WebServices/Bccr.Firma.Fva.Entidades.Ws.BS/ValidadorDeDocumento.asmx',
    schemas=[Schema_c49e7],
    version=soap.SOAPVersion.SOAP12,
    methods=[ValideElDocumentoXmlEnvelopedCoFirma_method,
             ValideElServicio_method],
)


##############################################################################
# SOAP Service Stub


class ValidadorDeDocumentoSoapServiceStub(soap.Stub):
    SERVICE = ValidadorDeDocumentoSoap_SERVICE
    SCHEME = settings.STUB_SCHEME
    HOST = settings.STUB_HOST

    def ValideElDocumentoXmlEnvelopedCoFirma(self, ValideElDocumentoXmlEnvelopedCoFirma, header=None):
        return self.call('ValideElDocumentoXmlEnvelopedCoFirma', ValideElDocumentoXmlEnvelopedCoFirma, header=header)

    def ValideElServicio(self, ValideElServicio, header=None):
        return self.call('ValideElServicio', ValideElServicio, header=header)
