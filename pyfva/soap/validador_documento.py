# -*- coding: utf-8 -*-
# flake8:noqa
# isort:skip_file
# vim:et:ft=python:nowrap:sts=4:sw=4:ts=4
##############################################################################
# Note: Generated by soapfish.wsdl2py at 2017-11-14 09:44:53.651394
#       Try to avoid editing it if you might need to regenerate it.
##############################################################################

from soapfish import soap, xsd
from pyfva.soap import settings
BaseHeader = xsd.ComplexType

##############################################################################
# Schemas


# http://bccr.fva.cr/


class CodigoDeErrorCoFirma(xsd.String):
    enumeration = ['SinErrores', 'ProblemasAlValidar', 'EntidadNoSeEncuentraRegistrada', 'EntidadSeEncuentraInactiva', 'DocumentoXmlInvalido', 'DocumentoXmlNoFirmado', 'DocumentoXmlSinQualifyingProperties', 'DocumentoXmlConEstructuraInvalida', 'CertificadoFirmanteNoValido', 'CertificadosNoValidos', 'RespuestaOcspNoValida', 'EstampaDeTiempoDeFirmaNoValida', 'SegundaEstampaDeTiempoNoValida', 'CrlsNoValidos', 'ReferenciaKeyInfoNoExiste', 'ReferenciaPropiesdadesFirmadasNoExiste', 'ReferenciaDocumentoOriginalNoExiste', 'ReferenciaADocumentoOriginalSinTransform', 'ReferenciaAPropiedadesFirmadasSinType', 'ReferenciaDocumentoConType', 'ReferenciaKeyInfoConType', 'ReferenciaSignedPropertiesConTransform', 'ReferenciaKeyInfoConTransform', 'HashReferenciaKeyInfoNoCoincide', 'HashReferenciaPropiedadesFirmadasNoCoincide', 'HashReferenciaDocumentoOriginalNoCoincide', 'SignatureValueNoValido', 'KeyValueNoCoincideConLlavePublica', 'OcspNoAsociadaACertificado', 'CertificadoFirmanteRevocado', 'CertificadoFirmanteEstadoDesconocido', 'CertificadoFirmanteVencido', 'TipoDeCertificadoFirmanteNoValido', 'QualifyingPropertiesContraIdSignature', 'SerialNumberNoCoincide', 'IssuerNameNoCoincide', 'MimeTypeNoPermitido', 'MimeTypeCadenaNoValida', 'EncodingNoPermitido', 'CantidadDataObjectFormatIncorrecta', 'DataObjectFormatNoValido', 'HashCertificadoFirmanteNoCoincide', 'SigningTimeFormatoNoValido', 'EstampaDeTiempoDeFirmaIntegridadComprometida', 'CertificadoDeEstampaDeFirmaNoCoincide', 'SegundaEstampaDeTiempoIntegridadComprometida', 'CertificadoDeSegundaEstampaNoCoincide', 'CantidadDeReferenciasACertificadosIncorrecta', 'ReferenciaACertificadoNoValida', 'NumeroDeSerieNoCoincide', 'CompleteCertRefsEmisoresDistintos', 'ResponderIdIncorrecto', 'ByKeyNoCoincideConLlaveOcsp', 'ByNameNoCoincideConLlaveOcsp', 'CantidadDeReferenciasOcspIncorrecta', 'ReferenciaAOcspNoValida', 'ProduceAtDeOcspIncorrecto', 'CantidadDeReferenciasCrlIncorrecta', 'ReferenciaACrlNoValida', 'IssuerDeCrlIncorrecto', 'IssueTimeDeCrlIncorrecto', 'NumeroDeCrlIncorrecto', 'JerarquiaDeCertificadoFirmanteIncompleta', 'JerarquiaDeCertificadoFirmanteNoValida', 'JerarquiaDeCertificadoHojaIncompleta', 'JerarquiaDeCertificadoHojaNoValida', 'CertificadoTSANoIncluido', 'CertificadoOcspNoIncluido', 'CertificadoExtra', 'CertificadoSinCRL', 'CertificadoRevocado', 'CertificadoVencido', 'CertificadoOcspNoCoincide', 'RespuestaOcspFueraDeLasEstampas', 'CrlVencido', 'CrlNoValido', 'CrlDeltaYBaseNoIncluidos', 'CrlExtra', 'CrlIndicatorNoValido', 'FirmaSinPrefijo']


class CodigoDeErrorContraFirma(xsd.String):
    enumeration = ['SinErrores', 'ProblemasAlValidar', 'EntidadNoSeEncuentraRegistrada', 'EntidadSeEncuentraInactiva', 'DocumentoXmlInvalido', 'DocumentoXmlNoFirmado', 'DocumentoXmlSinQualifyingProperties', 'DocumentoXmlConEstructuraInvalida', 'CertificadoFirmanteNoValido', 'CertificadosNoValidos', 'RespuestaOcspNoValida', 'EstampaDeTiempoDeFirmaNoValida', 'SegundaEstampaDeTiempoNoValida', 'CrlsNoValidos', 'ReferenciaKeyInfoNoExiste', 'ReferenciaPropiesdadesFirmadasNoExiste', 'ReferenciaDocumentoOriginalNoExiste', 'ReferenciaADocumentoOriginalSinTransform', 'ReferenciaAPropiedadesFirmadasSinType', 'ReferenciaDocumentoConType', 'ReferenciaKeyInfoConType', 'ReferenciaSignedPropertiesConTransform', 'ReferenciaKeyInfoConTransform', 'HashReferenciaKeyInfoNoCoincide', 'HashReferenciaPropiedadesFirmadasNoCoincide', 'HashReferenciaDocumentoOriginalNoCoincide', 'SignatureValueNoValido', 'KeyValueNoCoincideConLlavePublica', 'OcspNoAsociadaACertificado', 'CertificadoFirmanteRevocado', 'CertificadoFirmanteEstadoDesconocido', 'CertificadoFirmanteVencido', 'TipoDeCertificadoFirmanteNoValido', 'QualifyingPropertiesContraIdSignature', 'SerialNumberNoCoincide', 'IssuerNameNoCoincide', 'MimeTypeNoPermitido', 'MimeTypeCadenaNoValida', 'EncodingNoPermitido', 'CantidadDataObjectFormatIncorrecta', 'DataObjectFormatNoValido', 'HashCertificadoFirmanteNoCoincide', 'SigningTimeFormatoNoValido', 'EstampaDeTiempoDeFirmaIntegridadComprometida', 'CertificadoDeEstampaDeFirmaNoCoincide', 'SegundaEstampaDeTiempoIntegridadComprometida', 'CertificadoDeSegundaEstampaNoCoincide', 'CantidadDeReferenciasACertificadosIncorrecta', 'ReferenciaACertificadoNoValida', 'NumeroDeSerieNoCoincide', 'CompleteCertRefsEmisoresDistintos', 'ResponderIdIncorrecto', 'ByKeyNoCoincideConLlaveOcsp', 'ByNameNoCoincideConLlaveOcsp', 'CantidadDeReferenciasOcspIncorrecta', 'ReferenciaAOcspNoValida', 'ProduceAtDeOcspIncorrecto', 'CantidadDeReferenciasCrlIncorrecta', 'ReferenciaACrlNoValida', 'IssuerDeCrlIncorrecto', 'IssueTimeDeCrlIncorrecto', 'NumeroDeCrlIncorrecto', 'JerarquiaDeCertificadoFirmanteIncompleta', 'JerarquiaDeCertificadoFirmanteNoValida', 'JerarquiaDeCertificadoHojaIncompleta', 'JerarquiaDeCertificadoHojaNoValida', 'CertificadoTSANoIncluido', 'CertificadoOcspNoIncluido', 'CertificadoExtra', 'CertificadoSinCRL', 'CertificadoRevocado', 'CertificadoVencido', 'CertificadoOcspNoCoincide', 'RespuestaOcspFueraDeLasEstampas', 'CrlVencido', 'CrlNoValido', 'CrlDeltaYBaseNoIncluidos', 'CrlExtra', 'CrlIndicatorNoValido', 'FirmaSinPrefijo', 'ReferenciaCountersignedSignatureNoExiste', 'ReferenciaACountersignedSignatureSinType', 'HashReferenciaCountersignedSignatureNoCoincide']


class CodigoDeErrorMsOffice(xsd.String):
    enumeration = ['SinErrores', 'ProblemasAlValidar', 'EntidadNoSeEncuentraRegistrada', 'EntidadSeEncuentraInactiva', 'DocumentoXmlInvalido', 'DocumentoNoFirmado', 'DocumentoXmlSinQualifyingProperties', 'DocumentoXmlConEstructuraInvalida', 'CertificadoFirmanteNoValido', 'CertificadosNoValidos', 'RespuestaOcspNoValida', 'EstampaDeTiempoDeFirmaNoValida', 'SegundaEstampaDeTiempoNoValida', 'CrlsNoValidos', 'ReferenciaManifestNoExiste', 'ReferenciasDeRelacionEnManifestSinType', 'ReferenciaPropiedadesFirmadasNoExiste', 'ReferenciaEnManifestNoExiste', 'ReferenciaAPropiedadesFirmadasSinType', 'ReferenciaAPropiedadesFirmadasConTypeNoValido', 'ReferenciaAPropiedadesFirmadasSinTransform', 'ReferenciaOfficeObjectConTransform', 'ReferenciaManifestConTransform', 'ReferenciaConTransformInvalido', 'HashReferenciaPropiedadesFirmadasNoCoincide', 'HashReferenciaManifestNoCoincide', 'HashReferenciaOfficeObjectNoCoincide', 'HashReferenciaDeParteNoCoincide', 'HashReferenciaNoCoincide', 'SignatureValueNoValido', 'OcspNoAsociadaACertificado', 'CertificadoFirmanteRevocado', 'CertificadoFirmanteEstadoDesconocido', 'CertificadoFirmanteVencido', 'TipoDeCertificadoFirmanteNoValido', 'QualifyingPropertiesContraIdSignature', 'SerialNumberNoCoincide', 'IssuerNameNoCoincide', 'HashCertificadoFirmanteNoCoincide', 'SigningTimeFormatoNoValido', 'EstampaDeTiempoDeFirmaIntegridadComprometida', 'CertificadoDeEstampaDeFirmaNoCoincide', 'SegundaEstampaDeTiempoIntegridadComprometida', 'CertificadoDeSegundaEstampaNoCoincide', 'CantidadDeReferenciasACertificadosIncorrecta', 'ReferenciaACertificadoNoValida', 'NumeroDeSerieNoCoincide', 'CompleteCertRefsEmisoresDistintos', 'ResponderIdIncorrecto', 'ByKeyNoCoincideConLlaveOcsp', 'ByNameNoCoincideConLlaveOcsp', 'CantidadDeReferenciasOcspIncorrecta', 'ReferenciaAOcspNoValida', 'ProduceAtDeOcspIncorrecto', 'CantidadDeReferenciasCrlIncorrecta', 'ReferenciaACrlNoValida', 'IssuerDeCrlIncorrecto', 'IssueTimeDeCrlIncorrecto', 'NumeroDeCrlIncorrecto', 'JerarquiaDeCertificadoFirmanteIncompleta', 'JerarquiaDeCertificadoFirmanteNoValida', 'JerarquiaDeCertificadoTSAIncompleta', 'JerarquiaDeCertificadoTSANoValida', 'JerarquiaDeCertificadoHojaIncompleta', 'JerarquiaDeCertificadoHojaNoValida', 'CertificadoExtra', 'CertificadoSinCRL', 'CertificadoRevocado', 'CertificadoVencido', 'CertificadoOcspNoCoincide', 'CrlVencido', 'CrlNoValido', 'CrlDeltaYBaseNoIncluidos', 'CrlExtra', 'CrlIndicatorNoValido', 'DocumentoInvalido', 'FormatoDelSignatureTimeIncorrecto', 'ValorDelSignatureTimeIncorrecto', 'ReferenciaOfficeObjectSinType', 'ReferenciaAOfficeObjectConTypeNoValido', 'ReferenciaAManifestConTypeNoValido', 'ReferenciaOfficeObjectNoExiste']


class CodigoDeErrorOdf(xsd.String):
    enumeration = ['SinErrores', 'ProblemasAlValidar', 'EntidadNoSeEncuentraRegistrada', 'EntidadSeEncuentraInactiva', 'DocumentoXmlInvalido', 'DocumentoNoFirmado', 'DocumentoXmlSinQualifyingProperties', 'DocumentoXmlConEstructuraInvalida', 'CertificadoFirmanteNoValido', 'CertificadosNoValidos', 'RespuestaOcspNoValida', 'EstampaDeTiempoDeFirmaNoValida', 'SegundaEstampaDeTiempoNoValida', 'CrlsNoValidos', 'ReferenciaNoExiste', 'HashReferenciaNoCoincide', 'ReferenciaAPropiedadesFirmadasConTypeNoValido', 'ReferenciaPropiedadesFirmadasNoExiste', 'HashReferenciaSignaturePropertiesNoCoincide', 'HashReferenciaPropiedadesFirmadasNoCoincide', 'SignatureValueNoValido', 'OcspNoAsociadaACertificado', 'CertificadoFirmanteRevocado', 'CertificadoFirmanteEstadoDesconocido', 'CertificadoFirmanteVencido', 'TipoDeCertificadoFirmanteNoValido', 'QualifyingPropertiesContraIdSignature', 'SerialNumberNoCoincide', 'IssuerNameNoCoincide', 'keyInfoSerialNumberNoValido', 'keyInfoIssuerNameNoValido', 'HashCertificadoFirmanteNoCoincide', 'SigningTimeFormatoNoValido', 'EstampaDeTiempoDeFirmaIntegridadComprometida', 'CertificadoDeEstampaDeFirmaNoCoincide', 'SegundaEstampaDeTiempoIntegridadComprometida', 'CertificadoDeSegundaEstampaNoCoincide', 'CantidadDeReferenciasACertificadosIncorrecta', 'ReferenciaACertificadoNoValida', 'NumeroDeSerieNoCoincide', 'CompleteCertRefsEmisoresDistintos', 'ResponderIdIncorrecto', 'ByKeyNoCoincideConLlaveOcsp', 'ByNameNoCoincideConLlaveOcsp', 'CantidadDeReferenciasOcspIncorrecta', 'ReferenciaAOcspNoValida', 'ProduceAtDeOcspIncorrecto', 'CantidadDeReferenciasCrlIncorrecta', 'ReferenciaACrlNoValida', 'IssuerDeCrlIncorrecto', 'IssueTimeDeCrlIncorrecto', 'NumeroDeCrlIncorrecto', 'JerarquiaDeCertificadoTSAIncompleta', 'JerarquiaDeCertificadoTSANoValida', 'JerarquiaDeCertificadoFirmanteIncompleta', 'JerarquiaDeCertificadoFirmanteNoValida', 'JerarquiaDeCertificadoHojaIncompleta', 'JerarquiaDeCertificadoHojaNoValida', 'CertificadoExtra', 'CertificadoSinCRL', 'CertificadoRevocado', 'CertificadoVencido', 'CrlVencido', 'CrlNoValido', 'CrlDeltaYBaseNoIncluidos', 'CrlExtra', 'CrlIndicatorNoValido', 'DocumentoInvalido', 'CertificadoOcspNoCoincide', 'SignaturePropertyTimeFormatoNoValido']


class ResultadoValidacionCoFirma(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ExtensionData = xsd.Element(__name__ + '.ExtensionDataObject', minOccurs=0)
    Advertencias = xsd.Element(__name__ + '.ArrayOfString', minOccurs=0)
    ErroresEncontrados = xsd.Element(__name__ + '.ArrayOfErrorDeDocumentoCoFirma', minOccurs=0)
    Firmantes = xsd.Element(__name__ + '.ArrayOfFirmante', minOccurs=0)
    FueExitosa = xsd.Element(xsd.Boolean, minOccurs=1)

    @classmethod
    def create(cls, FueExitosa):
        instance = cls()
        instance.FueExitosa = FueExitosa
        return instance


class ExtensionDataObject(xsd.ComplexType):
    pass


class ArrayOfString(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    string = xsd.ListElement(xsd.String, tagname='string', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ArrayOfErrorDeDocumentoCoFirma(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ErrorDeDocumentoCoFirma = xsd.ListElement(__name__ + '.ErrorDeDocumentoCoFirma', tagname='ErrorDeDocumentoCoFirma', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance

    @property
    def ErrorDeDocumento(self):
        return self.ErrorDeDocumentoCoFirma

class ErrorDeDocumentoCoFirma(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ExtensionData = xsd.Element(ExtensionDataObject, minOccurs=0)
    Codigo = xsd.Element(CodigoDeErrorCoFirma, minOccurs=1)
    Detalle = xsd.Element(xsd.String, minOccurs=0)

    @classmethod
    def create(cls, Codigo):
        instance = cls()
        instance.Codigo = Codigo
        return instance


class ArrayOfFirmante(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Firmante = xsd.ListElement(__name__ + '.Firmante', tagname='Firmante', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class Firmante(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ExtensionData = xsd.Element(ExtensionDataObject, minOccurs=0)
    Cedula = xsd.Element(xsd.String, minOccurs=0)
    FechaDeFirma = xsd.Element(xsd.DateTime, minOccurs=1)
    NombreCompleto = xsd.Element(xsd.String, minOccurs=0)

    @classmethod
    def create(cls, FechaDeFirma):
        instance = cls()
        instance.FechaDeFirma = FechaDeFirma
        return instance


class ResultadoValidacionContraFirma(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ExtensionData = xsd.Element(ExtensionDataObject, minOccurs=0)
    Advertencias = xsd.Element(ArrayOfString, minOccurs=0)
    ErroresEncontrados = xsd.Element(__name__ + '.ArrayOfErrorDeDocumentoContraFirma', minOccurs=0)
    Firmantes = xsd.Element(ArrayOfFirmante, minOccurs=0)
    FueExitosa = xsd.Element(xsd.Boolean, minOccurs=1)

    @classmethod
    def create(cls, FueExitosa):
        instance = cls()
        instance.FueExitosa = FueExitosa
        return instance


class ArrayOfErrorDeDocumentoContraFirma(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ErrorDeDocumentoContraFirma = xsd.ListElement(__name__ + '.ErrorDeDocumentoContraFirma', tagname='ErrorDeDocumentoContraFirma', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance

    @property
    def ErrorDeDocumento(self):
        return self.ErrorDeDocumentoContraFirma

class ErrorDeDocumentoContraFirma(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ExtensionData = xsd.Element(ExtensionDataObject, minOccurs=0)
    Codigo = xsd.Element(CodigoDeErrorContraFirma, minOccurs=1)
    Detalle = xsd.Element(xsd.String, minOccurs=0)

    @classmethod
    def create(cls, Codigo):
        instance = cls()
        instance.Codigo = Codigo
        return instance


class ResultadoValidacionMsOffice(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ExtensionData = xsd.Element(ExtensionDataObject, minOccurs=0)
    Advertencias = xsd.Element(ArrayOfString, minOccurs=0)
    ErroresEncontrados = xsd.Element(__name__ + '.ArrayOfErrorDeDocumentoMsOffice', minOccurs=0)
    Firmantes = xsd.Element(ArrayOfFirmante, minOccurs=0)
    FormatoDelDocumento = xsd.Element(xsd.String, minOccurs=0)
    FueExitosa = xsd.Element(xsd.Boolean, minOccurs=1)

    @classmethod
    def create(cls, FueExitosa):
        instance = cls()
        instance.FueExitosa = FueExitosa
        return instance


class ArrayOfErrorDeDocumentoMsOffice(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ErrorDeDocumentoMsOffice = xsd.ListElement(__name__ + '.ErrorDeDocumentoMsOffice', tagname='ErrorDeDocumentoMsOffice', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance

    @property
    def ErrorDeDocumento(self):
        return self.ErrorDeDocumentoMsOffice

class ErrorDeDocumentoMsOffice(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ExtensionData = xsd.Element(ExtensionDataObject, minOccurs=0)
    Codigo = xsd.Element(CodigoDeErrorMsOffice, minOccurs=1)
    Detalle = xsd.Element(xsd.String, minOccurs=0)

    @classmethod
    def create(cls, Codigo):
        instance = cls()
        instance.Codigo = Codigo
        return instance


class ResultadoValidacionOdf(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ExtensionData = xsd.Element(ExtensionDataObject, minOccurs=0)
    Advertencias = xsd.Element(ArrayOfString, minOccurs=0)
    ErroresEncontrados = xsd.Element(__name__ + '.ArrayOfErrorDeDocumentoOdf', minOccurs=0)
    Firmantes = xsd.Element(ArrayOfFirmante, minOccurs=0)
    FormatoDelDocumento = xsd.Element(xsd.String, minOccurs=0)
    FueExitosa = xsd.Element(xsd.Boolean, minOccurs=1)

    @classmethod
    def create(cls, FueExitosa):
        instance = cls()
        instance.FueExitosa = FueExitosa
        return instance


class ArrayOfErrorDeDocumentoOdf(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ErrorDeDocumentoOdf = xsd.ListElement(__name__ + '.ErrorDeDocumentoOdf', tagname='ErrorDeDocumentoOdf', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance
    
    @property
    def ErrorDeDocumento(self):
        return self.ErrorDeDocumentoOdf

class ErrorDeDocumentoOdf(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ExtensionData = xsd.Element(ExtensionDataObject, minOccurs=0)
    Codigo = xsd.Element(CodigoDeErrorOdf, minOccurs=1)
    Detalle = xsd.Element(xsd.String, minOccurs=0)

    @classmethod
    def create(cls, Codigo):
        instance = cls()
        instance.Codigo = Codigo
        return instance


class ValideElDocumentoXmlEnvelopedCoFirma(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    elDocumentoXml = xsd.Element(xsd.Base64Binary, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ValideElDocumentoXmlEnvelopedCoFirmaResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ValideElDocumentoXmlEnvelopedCoFirmaResult = xsd.Element(ResultadoValidacionCoFirma, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ValideElDocumentoXmlEnvelopedContraFirma(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    elDocumentoXml = xsd.Element(xsd.Base64Binary, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ValideElDocumentoXmlEnvelopedContraFirmaResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ValideElDocumentoXmlEnvelopedContraFirmaResult = xsd.Element(ResultadoValidacionContraFirma, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ValideElDocumentoMSOffice(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    elDocumentoOffice = xsd.Element(xsd.Base64Binary, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ValideElDocumentoMSOfficeResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ValideElDocumentoMSOfficeResult = xsd.Element(ResultadoValidacionMsOffice, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ValideElDocumentoOdf(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    elDocumentoOdf = xsd.Element(xsd.Base64Binary, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ValideElDocumentoOdfResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ValideElDocumentoOdfResult = xsd.Element(ResultadoValidacionOdf, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ValideElServicio(xsd.ComplexType):
    pass


class ValideElServicioResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ValideElServicioResult = xsd.Element(xsd.Boolean, minOccurs=1)

    @classmethod
    def create(cls, ValideElServicioResult):
        instance = cls()
        instance.ValideElServicioResult = ValideElServicioResult
        return instance


Schema_c49e7 = xsd.Schema(
    imports=[],
    includes=[],
    targetNamespace=settings.FVA_HOST,
    elementFormDefault='qualified',
    simpleTypes=[CodigoDeErrorCoFirma, CodigoDeErrorContraFirma, CodigoDeErrorMsOffice, CodigoDeErrorOdf],
    attributeGroups=[],
    groups=[],
    complexTypes=[ResultadoValidacionCoFirma, ExtensionDataObject, ArrayOfString, ArrayOfErrorDeDocumentoCoFirma, ErrorDeDocumentoCoFirma, ArrayOfFirmante, Firmante, ResultadoValidacionContraFirma, ArrayOfErrorDeDocumentoContraFirma, ErrorDeDocumentoContraFirma, ResultadoValidacionMsOffice, ArrayOfErrorDeDocumentoMsOffice, ErrorDeDocumentoMsOffice, ResultadoValidacionOdf, ArrayOfErrorDeDocumentoOdf, ErrorDeDocumentoOdf],
    elements={'ValideElDocumentoXmlEnvelopedCoFirma': xsd.Element(ValideElDocumentoXmlEnvelopedCoFirma()), 'ValideElDocumentoXmlEnvelopedCoFirmaResponse': xsd.Element(ValideElDocumentoXmlEnvelopedCoFirmaResponse()), 'ValideElDocumentoXmlEnvelopedContraFirma': xsd.Element(ValideElDocumentoXmlEnvelopedContraFirma()), 'ValideElDocumentoXmlEnvelopedContraFirmaResponse': xsd.Element(ValideElDocumentoXmlEnvelopedContraFirmaResponse()), 'ValideElDocumentoMSOffice': xsd.Element(ValideElDocumentoMSOffice()), 'ValideElDocumentoMSOfficeResponse': xsd.Element(ValideElDocumentoMSOfficeResponse()), 'ValideElDocumentoOdf': xsd.Element(ValideElDocumentoOdf()), 'ValideElDocumentoOdfResponse': xsd.Element(ValideElDocumentoOdfResponse()), 'ValideElServicio': xsd.Element(ValideElServicio()), 'ValideElServicioResponse': xsd.Element(ValideElServicioResponse())},
)


##############################################################################
# Methods


ValideElDocumentoXmlEnvelopedCoFirma_method = xsd.Method(
    soapAction=settings.FVA_HOST + 'ValideElDocumentoXmlEnvelopedCoFirma',
    input='ValideElDocumentoXmlEnvelopedCoFirma',
    inputPartName='parameters',
    output='ValideElDocumentoXmlEnvelopedCoFirmaResponse',
    outputPartName='parameters',
    operationName='ValideElDocumentoXmlEnvelopedCoFirma',
    style='document',
)


ValideElDocumentoXmlEnvelopedContraFirma_method = xsd.Method(
    soapAction=settings.FVA_HOST + 'ValideElDocumentoXmlEnvelopedContraFirma',
    input='ValideElDocumentoXmlEnvelopedContraFirma',
    inputPartName='parameters',
    output='ValideElDocumentoXmlEnvelopedContraFirmaResponse',
    outputPartName='parameters',
    operationName='ValideElDocumentoXmlEnvelopedContraFirma',
    style='document',
)


ValideElDocumentoMSOffice_method = xsd.Method(
    soapAction=settings.FVA_HOST + 'ValideElDocumentoMSOffice',
    input='ValideElDocumentoMSOffice',
    inputPartName='parameters',
    output='ValideElDocumentoMSOfficeResponse',
    outputPartName='parameters',
    operationName='ValideElDocumentoMSOffice',
    style='document',
)


ValideElDocumentoOdf_method = xsd.Method(
    soapAction=settings.FVA_HOST + 'ValideElDocumentoOdf',
    input='ValideElDocumentoOdf',
    inputPartName='parameters',
    output='ValideElDocumentoOdfResponse',
    outputPartName='parameters',
    operationName='ValideElDocumentoOdf',
    style='document',
)


ValideElServicio_method = xsd.Method(
    soapAction=settings.FVA_HOST + 'ValideElServicio',
    input='ValideElServicio',
    inputPartName='parameters',
    output='ValideElServicioResponse',
    outputPartName='parameters',
    operationName='ValideElServicio',
    style='document',
)


##############################################################################
# SOAP Service


ValidadorDeDocumentoSoap_SERVICE = soap.Service(
    name='ValidadorDeDocumentoSoap',
    targetNamespace=settings.FVA_HOST,
    location='${scheme}://${host}/WebServices/Bccr.Firma.Fva.Entidades.Ws.BS/ValidadorDeDocumento.asmx',
    schemas=[Schema_c49e7],
    version=soap.SOAPVersion.SOAP12,
    methods=[ValideElDocumentoXmlEnvelopedCoFirma_method, ValideElDocumentoXmlEnvelopedContraFirma_method, ValideElDocumentoMSOffice_method, ValideElDocumentoOdf_method, ValideElServicio_method],
)


##############################################################################
# SOAP Service Stub


class ValidadorDeDocumentoSoapServiceStub(soap.Stub):
    SERVICE = ValidadorDeDocumentoSoap_SERVICE
    SCHEME = settings.STUB_SCHEME
    HOST = settings.STUB_HOST

    def ValideElDocumentoXmlEnvelopedCoFirma(self, ValideElDocumentoXmlEnvelopedCoFirma, header=None):
        return self.call('ValideElDocumentoXmlEnvelopedCoFirma', ValideElDocumentoXmlEnvelopedCoFirma, header=header)

    def ValideElDocumentoXmlEnvelopedContraFirma(self, ValideElDocumentoXmlEnvelopedContraFirma, header=None):
        return self.call('ValideElDocumentoXmlEnvelopedContraFirma', ValideElDocumentoXmlEnvelopedContraFirma, header=header)

    def ValideElDocumentoMSOffice(self, ValideElDocumentoMSOffice, header=None):
        return self.call('ValideElDocumentoMSOffice', ValideElDocumentoMSOffice, header=header)

    def ValideElDocumentoOdf(self, ValideElDocumentoOdf, header=None):
        return self.call('ValideElDocumentoOdf', ValideElDocumentoOdf, header=header)

    def ValideElServicio(self, ValideElServicio, header=None):
        return self.call('ValideElServicio', ValideElServicio, header=header)
